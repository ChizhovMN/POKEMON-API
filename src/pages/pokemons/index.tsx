import { useEffect, useState } from "react";
import { GetServerSideProps, InferGetServerSidePropsType } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { useDebouncedCallback } from "use-debounce";
import { PokemonPageType } from "../../types";
import Header from "../../components/header";
import Footer from "@/components/footer";
import PaginationPage from "../../components/paginationPage";
import InfiniteScrollPage from "../../components/infinitScrollPage";
import { fetcherGraphQL } from "@/services";
import styles from "@/styles/Home.module.css";
import PokemonPage from "./pokemon/[id]";

export const getServerSideProps: GetServerSideProps<{
  pokemonPage: PokemonPageType;
}> = async () => {
  try {
    const pokemonPage: PokemonPageType = await fetcherGraphQL();
    return {
      props: {
        pokemonPage,
      },
    };
  } catch {
    return {
      notFound: true,
    };
  }
};

export default function Home({
  pokemonPage,
}: InferGetServerSidePropsType<typeof getServerSideProps>) {
  const { push, query } = useRouter();
  const [pageView, setPageView] = useState<string>("pages");
  const [search, setSearch] = useState((query.search as string) || "");
  const [pagination, setPagination] = useState({
    limit: Number(query.limit) || 16,
    offset: Number(query.offset) || 0,
  });
  const defferedSearch = useDebouncedCallback((search: string) => {
    setSearch(search);
  }, 500);

  useEffect(() => {
    const params = new URLSearchParams(document.location.search);
    const view = params.get("view");
    if (view) {
      setPageView(view);
    }
    setSearch((query.search as string) || "");
  }, []);
  useEffect(() => {
    if (!search.length) {
      delete query.search;
    }
    push({ query: { ...query, view: pageView } }, undefined, {
      shallow: true,
    });
  }, [pageView, search]);

  const handleClickViewAll = () => {
    setPageView("all");
    setPagination(
      { limit: Number(query.limit) || 16, offset: Number(query.offset) } || 0
    );
    delete query.limit;
    delete query.offset;
  };
  const handleCLickViewPage = () => {
    setPageView("pages");
  };
  const handleSearchField = (event: Event) => {
    if (event.target instanceof HTMLInputElement) {
      push({ query: { ...query, search: event.target.value } }, undefined, {
        shallow: true,
      });
      defferedSearch(event.target.value);
    }
  };

  return (
    <>
      <Head>
        <title>POKEMON API</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header
        searchField={search}
        pokemonsCounter={pokemonPage.count}
        btnNameAllView={"ALL"}
        btnNamePageView={"PAGE"}
        handleClickAllView={handleClickViewAll}
        handleClickPageView={handleCLickViewPage}
        handleSearch={(event: Event) => handleSearchField(event)}
      />
      <main className={styles.main}>
        {pageView === "pages" ? (
          <PaginationPage
            pokemonPage={pokemonPage}
            search={search}
            page={pagination}
          />
        ) : (
          <InfiniteScrollPage pokemonPage={pokemonPage} search={search} />
        )}
      </main>
      <Footer />
    </>
  );
}
