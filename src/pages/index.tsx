import Head from "next/head";
import Image from "next/image";
import styles from "@/styles/Home.module.css";
import { ReactNode, useEffect, useState } from "react";
import { PokemonLink, PokemonsAPI } from "./types";
import Header from "./header";
import Link from "next/link";
import Footer from "./footer";
import PageBtn from "./pageBtn";
import useSWR from "swr";
import { GetStaticProps, InferGetStaticPropsType } from "next";

export const myLoader = (id: string | string[] | undefined) => {
  return `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${id}.png`;
};

export const getStaticProps: GetStaticProps<{
  serverData: PokemonsAPI;
}> = async () => {
  const res = await fetch(
    "https://pokeapi.co/api/v2/pokemon/?limit=16&offset=0"
  );
  const serverData: PokemonsAPI = await res.json();
  return {
    props: {
      serverData,
    },
  };
};

export const fetcher = (link: string) => fetch(link).then((res) => res.json());

export default function Home({
  serverData,
}: InferGetStaticPropsType<typeof getStaticProps>) {
  const [pokemonsData, setPokemonsData] = useState(serverData);
  const [view, setView] = useState<"pages" | "all">("pages");
  const [search, setSearch] = useState("");
  const [offset, setOffset] = useState(0);
  const [lastPage, setLastPage] = useState(offset);
  const [limit, setLimit] = useState(16);
  const { data } = useSWR(
    `https://pokeapi.co/api/v2/pokemon/?limit=${limit}&offset=${offset}`,
    fetcher
  );
  useEffect(() => {
    if (data) {
      setPokemonsData(data);
      console.log("SWR", data);
    }
  }, [data, pokemonsData]);
  const searchField = pokemonsData.results.filter((item) =>
    item.name.startsWith(search.trim())
  );
  const pokemonsPage = Math.floor(
    search ? searchField.length / 16 : serverData.count / 16
  );
  const handleClickViewAll = () => {
    setLimit(10000);
    setOffset(0);
    setView("all");
  };
  const handleCLickViewPage = () => {
    setLimit(16);
    setOffset(lastPage);
    setView("pages");
  };
  const handleSearchField = (event: React.ChangeEvent<HTMLInputElement>) => {
    setSearch(event.target.value);
  };
  const handleClickNext = () => {
    if (search) return;
    if (data.count && offset < data.count - 16) {
      setOffset(offset + 16);
      setLastPage(offset + 16);
    }
  };
  const handleClickPrevious = () => {
    if (search) return;
    if (offset > 0) {
      setOffset(offset - 16);
      setLastPage(offset - 16);
    }
  };
  const PaginationField = (
    <div className={styles["main-btns"]}>
      <PageBtn btnName={"<"} handleClick={() => handleClickPrevious()} />
      <div className={styles.pagination}>
        <input
          className={styles["pagination-input"]}
          type="number"
          name="page"
          id="page"
          min={1}
          value={offset / 16 + 1}
          onChange={(event) => {
            if (search) return;
            if (
              1 <= +event.target.value &&
              +event.target.value <= pokemonsPage + 1
            ) {
              setOffset(Number(event.target.value) * 16 - 16);
            }
          }}
        />
        <div>/ {pokemonsPage + 1}</div>
      </div>
      <PageBtn btnName={">"} handleClick={() => handleClickNext()} />
    </div>
  );
  const viewPort = {
    all: <></>,
    pages: PaginationField,
  };
  return (
    <>
      <Head>
        <title>POKEMON API</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header
        pokemonsCounter={search ? searchField.length : serverData.count}
        btnNameAllView={"ALL"}
        btnNamePageView={"PAGE"}
        handleClickAllView={handleClickViewAll}
        handleClickPageView={handleCLickViewPage}
        handleSearch={handleSearchField}
      />
      <main className={styles.main}>
        <div className={styles["main-table"]}>
          {CreatePokemonTable(search ? searchField : pokemonsData.results)}
        </div>
        {viewPort[view]}
      </main>
      <Footer />
    </>
  );
}

function PokemonItem({ id, name }: { id: string; name: string }) {
  return (
    <Link
      key={id}
      id={id}
      className={styles["main-item"]}
      href={`pokemon/${id}`}
    >
      <Image
        unoptimized
        loader={() => myLoader(id)}
        src={myLoader(id)}
        alt={name}
        width={150}
        height={150}
      />
      {name}
    </Link>
  );
}

function CreatePokemonTable(arr: PokemonLink[]): ReactNode {
  return arr.map((item) => {
    const urlSplit = item.url.split("/");
    const id = urlSplit[urlSplit.length - 2];
    return <PokemonItem key={id} id={id} name={item.name} />;
  });
}
