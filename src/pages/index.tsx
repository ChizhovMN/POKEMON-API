import Head from "next/head";
import Image from "next/image";
import styles from "@/styles/Home.module.css";
import { useEffect, useState, useDeferredValue } from "react";
import { Pokemon, PokemonLink, PokemonsAPI } from "./types";
import Header from "./header";
import Link from "next/link";
import Footer from "./footer";
import PageBtn from "./pageBtn";
import useSWR from "swr";
import { GetStaticProps, InferGetStaticPropsType } from "next";

export const myLoader = (id: string | string[] | undefined) => {
  return `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${id}.png`;
};

export const getStaticProps: GetStaticProps<{
  serverData: PokemonsAPI;
}> = async (context) => {
  const res = await fetch(
    "https://pokeapi.co/api/v2/pokemon/?limit=16&offset=0"
  );
  const serverData: PokemonsAPI = await res.json();
  return {
    props: {
      serverData,
    },
  };
};

const getData = async (link: string) => {
  const response = await fetch(link);
  return await response.json();
};

export default function Home({
  serverData,
}: InferGetStaticPropsType<typeof getStaticProps>) {
  const [pokemonsData, setPokemonsData] = useState(serverData);
  const [pokemons, setPokemons] = useState(serverData.results);
  const [view, setView] = useState<"pages" | "all">("pages");
  const [page, setPage] = useState(0);
  const fetcher = (offset: number, limit = 16) => {
    fetch(`https://pokeapi.co/api/v2/pokemon/?limit=${limit}&offset=${offset}`)
      .then((res) => res.json())
      .then((data: PokemonsAPI) => {
        setPokemonsData(data);
        setPokemons(data.results);
      });
  };
  const { data: results } = useSWR(
    "https://pokeapi.co/api/v2/pokemon/?limit=16&offset=0",
    () => fetcher(0, 10000)
  );
  console.log("DATAPOKEMONS", results);
  const pokemonsPage = Math.floor(pokemonsData.count / 16) + 1;
  const handleClickViewAll = () => {
    fetcher(0, 10000);
    setView("all");
  };
  const handleCLickViewPage = () => {
    fetcher(page * 16);
    setView("pages");
  };
  const handleSearchField = (event: React.ChangeEvent<HTMLInputElement>) => {
    // fetch()
  };
  const handleClickNext = () => {
    if (pokemonsData.next !== null) {
      fetcher((page + 1) * 16);
      setPage(page + 1);
    }
  };
  const handleClickPrevious = () => {
    if (pokemonsData.previous !== null) {
      fetcher((page - 1) * 16);
      setPage(page - 1);
    }
  };
  const PaginationField = (
    <div className={styles["main-btns"]}>
      <PageBtn btnName={"<"} handleClick={() => handleClickPrevious()} />
      <div className={styles.pagination}>
        <input
          className={styles["pagination-input"]}
          type="number"
          name="page"
          id="page"
          min={1}
          value={page + 1}
          onChange={(event) => {}}
        />
        <div>/ {pokemonsPage}</div>
      </div>
      <PageBtn btnName={">"} handleClick={() => handleClickNext()} />
    </div>
  );
  const viewPort = {
    all: <></>,
    pages: PaginationField,
  };
  return (
    <>
      <Head>
        <title>POKEMON API</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header
        pokemonsCounter={pokemonsData.count}
        btnNameAllView={"ALL"}
        btnNamePageView={"PAGE"}
        handleClickAllView={handleClickViewAll}
        handleClickPageView={handleCLickViewPage}
        handleSearch={handleSearchField}
      />
      <main className={styles.main}>
        <div className={styles["main-table"]}>
          {view === "all"
            ? CreatePokemonTable(pokemons)
            : CreatePokemonTable(pokemons)}
        </div>
        {viewPort[view]}
      </main>
      <Footer />
    </>
  );
}

function PokemonItem({ id, name }: { id: string; name: string }) {
  return (
    <Link
      key={id}
      id={id}
      className={styles["main-item"]}
      href={`pokemon/${id}`}
    >
      <Image
        unoptimized
        loader={() => myLoader(id)}
        src={myLoader(id)}
        alt={name}
        width={150}
        height={150}
      />
      {name}
    </Link>
  );
}

function CreatePokemonTable(arr: PokemonLink[]) {
  return arr.map((item) => {
    const urlSplit = item.url.split("/");
    const id = urlSplit[urlSplit.length - 2];
    return <PokemonItem key={id} id={id} name={item.name} />;
  });
}
